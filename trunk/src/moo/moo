#! /usr/bin/env python2.2

import os
import sys
import time
import signal

CONFDIR="/tmp/moo"


def printUsage():
    print "Usage: moo <options> [command] <command-options>\n" + \
              "Where [command] is one of:\n" + \
              "scan     - scan for available networks\n" + \
              "list     - list available profiles\n"+ \
              "select   - select a particular profile\n"

def scanNetworks():
    pass

def runCmd(cmd):
    print "Executing \"" + cmd + "\""
    v = os.system(cmd)
    print "Result: " + str(v)

class ProfileHandler:
    def __init__(self):
        self.profiles = {}
        self._loadProfiles()
    def _loadProfiles(self):
        for x in os.listdir(CONFDIR+"/profiles"):
            if x[-1] != "~" and x[0] != ".":
                self.profiles[x] = Profile(CONFDIR+"/profiles/"+x)
    def listProfiles(self,detailed=0):
        for x in self.profiles.keys():
            if detailed:
                print x + ":"
                self.profiles[x].dump()
            else:
                print x + " [" + self.profiles[x].description + "]"
    def getProfileNames(self):
        return self.profiles.keys()
    def getProfile(self,name):
        return self.profiles[name]


class Profile:
    def __init__(self, filename):
        self._loadFromFile(filename)
    def _loadFromFile(self,filename):
        self.desc = ""
        self.ifaceName = ""
        self.ip = ""
        self.broadcast = ""
        self.gateway = ""
        self.exclusive = "no"

        ins = open(filename)
        for s in ins.readlines():
            for x in ["description","ifaceName","ip","broadcast",
                      "gateway","exclusive"]:
                if s.find(x+"=") == 0:
                    val=s.replace(x+"=","").strip()
                    self.__dict__[x] = val
    def dump(self):
        print "description = " + self.description + "\n" + \
              "iface       = " + self.ifaceName + "\n" + \
              "ip          = " + self.ip + "\n" + \
              "broadcast   = " + self.broadcast + "\n" + \
              "gateway     = " + self.gateway + "\n" + \
              "exclusive   = " + self.exclusive + "\n"

class Interface:
    def __init__(self, name):
        self.name = name
        self.netmask = ""
        self.broadcast = ""
        self.ip = ""
        self.gateway = ""
        self._loadIPV4Info()
    def _loadIPV4Info(self):
        pass
    def getNetmask(self):
        return self.netmask
    def getName(self):
        return self.name
    def getBroadcast(self):
        return self.broadcast
    def getGateway(self):
        return self.gateway
    def setGateway(self,gw):
        self.gateway = gw
    def setBroadcast(self,broadcast):
        self.broadcast = broadcast
    def setNetmask(self,netmask):
        self.netmask = netmask
    def runDHCP(self):
        runCmd("dhcpcd " + self.name)
    def down(self):
        runCmd("ifconfig " + self.name + " down")
        pidFile = "/var/run/dhcpcd-" + self.name + ".pid"
        if os.path.exists(pidFile):
            ins = open(pidFile)
            pid = int(ins.readline())
            os.kill(pid,signal.SIGTERM)
            time.sleep(1)
    def up(self):
        if self.ip:
            options += self.ip + " "
        if self.broadcast:
            options += "broadcast " + self.broadcast + " "
        if self.netmask:
            options += "netmask " + self.netmask + " "
        runCmd("ifconfig " + self.name + " " + options + " up")
        if self.gateway:
            runCmd("route add default gw " + self.gateway + " " + self.name)
            
class InterfaceHandler:
    def __init__(self):
        self.ifaces = {}
        self._loadAllInterfaces()
    def _loadAllInterfaces(self):
        ins=open("/proc/net/dev")
        for line in ins.readlines():
            tokens = line.split()
            ifaceName = tokens[0].strip()
            if ifaceName[-1] == ":":
                ifaceName = ifaceName[:-1]
                iface = Interface(ifaceName)
                self.ifaces[ifaceName] = iface
    def getInterface(self,ifaceName):
        return self.ifaces[ifaceName]
    def downAll(self):
        for x in self.ifaces.values():
            if x.getName() != "lo":
                x.down()

class Moo:
    def __init__(self):
        self.profileHandler = ProfileHandler()
        self.ifaceHandler = InterfaceHandler()
    
    def selectProfile(self,profile):
        prof = self.profileHandler.getProfile(profile)

        if prof.exclusive == "yes":
            self.ifaceHandler.downAll()

        iface = self.ifaceHandler.getInterface(prof.ifaceName)
        
        if prof.ip == "dhcp":
            iface.runDHCP()
        else:
            iface.setIPAddr(prof.ip)
            iface.setBroadcast(prof.broadcast)
            iface.setNetmask(prof.netmask)
            iface.setGateway(prof.gateway)
            iface.up()
            
    def listProfiles(self,detailed=0):
        self.profileHandler.listProfiles(detailed)
        
def main():
    if len(sys.argv) < 2:
        printUsage()
        sys.exit(1)

    moo = Moo()

    for i in xrange(len(sys.argv)):
        if sys.argv[i] == "list":
            detailed = 0
            for x in sys.argv[i:]:
                if x == "--detailed":
                    detailed = 1
            moo.listProfiles(detailed)

        elif sys.argv[i] == "select":
            moo.selectProfile(sys.argv[2])

if __name__ == "__main__":
    main()


# TODO
# - automatically create profile
# - specify wireless network name
# - specify wep key
# - specify access point
# - specify pre_run/post_run commands
#   - with parameters
# 
