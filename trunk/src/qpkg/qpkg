#! /usr/bin/env python2.2
#
# Copyright 2003 Karl Trygve Kalleberg
# Copyright 2003 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU General Public License v2
#
# $Header$
# Author: Karl Trygve Kalleberg <karltk@gentoo.org>
#
#
# qpkg - query portage package system for various information
#
# This is a reimplementation of the previous qpkg, written in bash, by 
# Vitaly Kushneriuk <vitaly_kushneriuk@yahoo.com>,
# Brandon Low <lostlogic@gentoo.org>,
# Josh Goebel <dreamer@firesedge.org>
#
# $Header$

import sys
from output import *

__author__ = "Karl Trygve Kalleberg"
__email__ = "karltk@gentoo.org"
__version__ = "0.2.0"
__productname__ = "qpkg"
__description__ = "Query Portage package system CLI tool"

class Config:
    showUsage=0
    pass

def showUsage():
    
    print turquoise("qpkg") + " v" + __version__ + " - Gentoo package query tool"

    print white("Usage:")

    print "\t" + turquoise("qpkg") + " " +\
          "[" + white("options") + "] " + \
          "[" + yellow("pkgname") + "] " + \
          "[" + blue("-g") + " " + yellow("group") + "] " + \
          "[" + blue("-f") + " " + yellow("<file>") + "|" + blue("-fp") + " " + yellow("<pattern") + "]"

    print "\t" + turquoise("qpkg") + " " + blue("--dups") + " [" + blue("--slot") + "]"
    print "\t" + turquoise("qpkg") + " " + blue("--help")

    print "\n" + white("Duplicates:")
    print blue("-d,   --dups") + "\t\tprint packages that have multiple versions installed"
    print blue("-s,   --slot") + "\t\tmake " + blue("-d") + " SLOT only print dups of the same SLOT"

    print "\n" + white("Package selection:")
    print blue("-f,   --find-file") + "\tfinds package that owns file <file>"
    print blue("-fp,  --find-pattern") + "\tfinds package that owns file matching *<pattern>*"
    print blue("-m,   --masked") + "\t\tinclude " + yellow("only") + " masked packages"
    print blue("-n,   --non-masked") + "\tinclude " + yellow("only") + " installed packages"
    print blue("-U,   --uninstalled") + "\tinclude " + yellow("only") + " uninstalled packages"
    print blue("-g,   --group") + "\t\tfind by group (can be combined with other searches"

    print "\n" + white("Information selection:")
    print blue("-l,   --list") + "\t\tlist package content"
    print blue("-i,   --info") + "\t\tget package description and home page"
    print blue("-ct,  --check-time")
    print blue("-tc,  --time-check") + "\tverify package files' time stamps"
    print blue("-cm,  --check-md5")
    print blue("-mc,  --md5-check") + "\tverify package files md5"
    print blue("-c,   --check") + "\t\tverify mtimes " + yellow("and") + "md5"
    print blue("-q,   --query-deps") + "\tdisplay all installed packages" + \
              "\n\t\t\tdepending on selected packages"

    print "\n" + white("Operation modifiers:")
    print blue("-nc, --no-color") + "\tdo not use colors"
    print blue("-v,  --verbose") + "\tincrease verbosity [ can be repeated twice ]"
    print blue("-vv") + "\t\tsame as " + blue("-v -v")

    print "\n" + yellow("Notes")
    print yellow("*") + " " + blue("-f, -fp, -d, -l, -ct, -cm") + " and " + \
          blue("-c") + " apply only to installed packages"
    print yellow("*") + " short options may not be combined on the command-line, yet"
    print yellow("*") + " the operation of some flags has been changed by the " + \
          "stripping of version\n" + \
          "  numbers from some output to see the version numbers play with " + \
          blue("-v") + " and " + blue("-vv")
    print yellow("*") + " when using " + blue("-f") + " with " + blue("-l") + \
              " or " + blue("--check.. -v") + " options, only matching files will be\n" + \
              "  displayed, unless " + blue("-v") + " is doubled, or " + blue("--vv") + " is used"

    print "\n" + yellow("Examples:")
    print "qpkg --dups          print duplicates oldest first"
    print "qpkg --dups -v       ... with versions"
    print "qpkg                 print list of installed packages"
    print "qpkg porta -I        print versions of installed portage"
    print "qpkg porta -i        ... + versions in portage tree + descriptions and homepages"
    print "qpkg gawk -c -v      check integrity of all installed versions of gawk, the\n" + \
          "\t\t\tolder will have \"damaged\" files"
    print "qpkg -f /bin/ls      print package(s) that own /bin/ls"

def setupConfigDefaults():
    Config.verbosity = 0
    Config.color = 1
    Config.showUsage = 0
    Config.showPackageContents = 0
    Config.showInstalled = 0
    Config.showMasked = 0
    Config.showDeps = 0
    Config.showSlot = 0
    Config.findFile = 0
    Config.checkMD5 = 0
    Config.checkTime = 0
    
def parseArgs():
    setupConfigDefaults()

    if len(sys.argv) < 2:
        Config.showUsage = 1
        return

    args=sys.argv[1:]
    skip=0
    for x in range(len(args)):
        # FIXME: Nasty skippery hackery
        if skip:
            skip-=1
            continue
        i=args[x]
        if 0:
            pass
        elif i in ["-h","--help"]:
            Config.showUsage = 1
        elif i in ["-i","--info"]:
            Config.showInfo = 1
        elif i in ["-d","--dups"]:
            Config.showDups = 1
            Config.showInstalled = 1
        elif i in ["-q","--query-deps"]:
            Config.showDeps = 1
        elif i in ["-s","--slot"]:
            Config.showSlot = 1
        elif i in ["-f","--find-file"]:
            Config.findFile = 1
            Config.showInstalled = 1
        elif i in ["-fp","--find-pattern"]:
            Config.findFile = 1
            Config.findFilePattern = 1
            Config.showInstalled = 1
        elif i in ["-I","--installed"]:
            Config.showInstalled = 1
        elif i in ["-m", "--masked"]:
            Config.showMasked = 1
        elif i in ["-n", "--non-masked"]:
            Config.showMasked = 0
        elif i in ["-U","--uninstalled"]:
            Config.showInstalled = 0
        elif i in ["-g","--group"]:
            Config.showCategory = args[x+1]
            skip=1
        elif i in ["-l", "--list"]:
            Config.showPackageContents = 1
            Config.showInstalled = 1
        elif i in ["-ct","--check-time","-tc","--time-check"]:
            Config.checkTime = 1
            Config.showInstalled = 1
        elif i in ["-cm","--check-md5","-mc","--md5-check"]:
            Config.checkMD5 = 1
            Config.showInstalled = 1
        elif i in ["-v","--verbose"]:
            Config.verbosity += 1
        elif i in ["-vv"]:
            Config.verbosity += 2
        elif i in ["-nc","--no-color","--nocolor","--no-colors"]:
            Config.color = 0
        else:
            print "xx:", i
            Config.showUsage=1
            break

def showPackageContents():
    print "showPackageContents"

def checkMD5():
    print "checkMD5"

def checkTimeStamps():
    print "checkTimeStamps"
    
def findFile():
    print "findFile"

def showDeps():
    print "showDeps"
    
def main():
    parseArgs()
    if Config.showUsage:
        showUsage()
    elif Config.showPackageContents:
        showPackageContents()
    elif Config.checkMD5:
        checkMD5()
    elif Config.checkTime:
        checkTimeStamps()
    elif Config.findFile:
        findFile()
    elif Config.showDeps:
        showDeps()
    else:
        raise "Don't know what do do..."
    
if __name__ == "__main__":
    main()
